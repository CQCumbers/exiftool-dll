diff --git a/perl5/Configure b/perl5/Configure
index bd96249c07..da218692f4 100755
--- a/perl5/Configure
+++ b/perl5/Configure
@@ -4695,29 +4695,6 @@ int main(int argc, char **argv) {
     return count == 1 ? 0 : argc;
 }
 EOCP
-c99_for=no
-for flag in '' '-std=gnu99' '-std=c99'; do
-    if $cc -o try $flag $ccflags $ldflags try.c 2>/dev/null && ./try; then
-        c99_for="$flag"
-        break;
-    fi
-done
-case "$c99_for" in
-'') echo "Your C compiler doesn't need any special flags to compile C99 code"
-    ;;
-no) echo >&4 "Your C compiler doesn't seem to be able to compile C99 code"
-    rp='Do you really want to continue?'
-    dflt='n'
-    . ./myread
-    case "$ans" in
-	[yY])	echo >&4 "Okay, continuing."	;;
-	*)	exit 1				;;
-    esac
-    ;;
-*)  echo "Your C compiler needs $c99_for to compile C99 code"
-    ccflags="$c99_for $ccflags"
-    ;;
-esac
 $rm -f try try.*
 
 : What should the include directory be ?
diff --git a/perl5/hints/emscripten.sh b/perl5/hints/emscripten.sh
new file mode 100644
index 0000000000..2d025cf1bb
--- /dev/null
+++ b/perl5/hints/emscripten.sh
@@ -0,0 +1,166 @@
+# ##### WebPerl - http://webperl.zero-g.net #####
+#
+# Copyright (c) 2018 Hauke Daempfling (haukex@zero-g.net)
+# at the Leibniz Institute of Freshwater Ecology and Inland Fisheries (IGB),
+# Berlin, Germany, http://www.igb-berlin.de
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the same terms as Perl 5 itself: either the GNU General Public
+# License as published by the Free Software Foundation (either version 1,
+# or, at your option, any later version), or the "Artistic License" which
+# comes with Perl 5.
+#
+# This program is distributed in the hope that it will be useful, but
+# WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+# See the licenses for details.
+#
+# You should have received a copy of the licenses along with this program.
+# If not, see http://perldoc.perl.org/index-licence.html
+
+hostperl="hostperl/miniperl"
+hostgenerate="hostperl/generate_uudmap"
+
+osname="emscripten"
+archname="wasm"
+osvers="1.0.0"
+
+myhostname='localhost'
+mydomain='.local'
+cf_email='haukex@zero-g.net'
+perladmin='root@localhost'
+
+cc="emcc"
+ld="emcc"
+
+nm="llvm-nm"  # note from Glossary: 'After Configure runs, the value is reset to a plain "nm" and is not useful.'
+ar="emar"  # note from Glossary: 'After Configure runs, the value is reset to a plain "ar" and is not useful.'
+ranlib="emranlib"
+
+# Case-insensitive filesystems don't get along with Makefile and
+# makefile in the same place.  Since Darwin uses GNU make, this dodges
+# the problem.
+firstmakefile=GNUmakefile;
+
+# Here's a fun one: apparently, when building perlmini.c, emcc notices that it's a symlink to perl.c, and compiles to perl.o
+# (because there is no -o option), so the final perl ends up thinking it's miniperl (shown in "perl -v", @INC doesn't work, etc.).
+# Because of this and other issues I've had with symlinks, I'm switching to hard links instead.
+# (Another possible fix might be to fix the Makefile steps so that they use the -o option, but this solution works for now.)
+#TODO Later: In NODEFS, does Perl's -e test work correctly on symlinks? (./t/TEST was having issues detecting ./t/perl, a symlink to ./perl).
+#lns="/bin/ln"
+
+inc_version_list="none"
+
+man1dir="none"
+man3dir="none"
+
+sysroot="$EMSCRIPTEN/system"
+loclibpth=''
+glibpth=''
+
+usemymalloc="n"
+usemallocwrap="define"
+uselargefiles="n"
+usenm='undef'
+d_procselfexe='undef'
+
+d_dlopen='undef'
+dlsrc='none'
+
+# Rely on Configure to specift extensions
+static_ext=''
+dynamic_ext=''
+
+# It *looks* like shm*, sem* and a few others exist in Emscripten's libc,
+# but I'm not sure why Configure isn't detecting them. But at the moment I'm not going
+# to worry about them, and just not build IPC-SysV.
+noextensions='IPC/SysV'
+
+d_libname_unique="define"
+
+# For the following values, as far as I can tell by looking into Emscripten's
+# libc sources, Configure *appears* to misdetect them. Either Configure is wrong,
+# or I am wrong, so further investigation is needed.
+d_getnameinfo='define'
+#d_prctl='define' # hm, it's present in the libc source, but Configure shows Emscripten error output? -> for now, assume it's not available
+
+# Configure seems to think the following two aren't available, although they seem to be in the Emscripten sources - leave them out anyway
+#d_recvmsg='define'
+#d_sendmsg='define'
+
+d_getgrgid_r='define'
+d_getgrnam_r='define'
+
+# Emscripten does not have signals support (documentation isn't 100% clear on this? but see "$EMSCRIPTEN/system/include/libc/setjmp.h")
+# but if you do: grep -r 'Calling stub instead of' "$EMSCRIPTEN"
+# you'll see the unsupported stuff (as of 1.37.35):
+# signal() sigaction() sigprocmask() __libc_current_sigrtmin __libc_current_sigrtmax kill() killpg() siginterrupt() raise() pause()
+# plus: "Calling longjmp() instead of siglongjmp()"
+d_sigaction='undef'
+d_sigprocmask='undef'
+d_killpg='undef'
+d_pause='undef'
+d_sigsetjmp='undef' # this also disables Perl's use of siglongjmp() (see config.h)
+# the others either aren't used by Perl (like siginterrupt) or can't be Configure'd (like kill)
+#TODO Later: currently I've disabled Perl's use of signal() by patching the source - maybe there's a better way?
+
+# Emscripten doesn't actually have these either (see "$EMSCRIPTEN/src/library.js")
+d_wait4='undef'
+d_waitpid='undef'
+d_fork='define' # BUT, perl needs this one to at least build
+d_vfork='undef'
+d_pseudofork='undef'
+
+# currently pthreads support is experimental
+# http://kripken.github.io/emscripten-site/docs/porting/pthreads.html
+i_pthread='undef'
+d_pthread_atfork='undef'
+d_pthread_attr_setscope='undef'
+d_pthread_yield='undef'
+
+# We're avoiding all the 64-bit stuff for now.
+# Commented out stuff is correctly detected.
+#TODO: JavaScript uses 64-bit IEEE double FP numbers - will Perl use those?
+#TODO: Now that we've switched to WebAssembly, can we use 64 bits everywhere?
+# see https://groups.google.com/forum/#!topic/emscripten-discuss/nWmO3gi8_Jg
+#use64bitall='undef'
+#use64bitint='undef'
+#usemorebits='undef'
+#usequadmath='undef'
+#TODO Later: Why does Configure seem to ignore the following? (and do we care?)
+d_quad='undef'
+
+#TODO Later: The test for "selectminbits" seems to fail,
+# the error appears to be coming from this line (because apparently stream.stream_ops is undefined):
+# https://github.com/kripken/emscripten/blob/ddfc3e32f65/src/library_syscall.js#L750
+# For now, just use this number from a build with an earlier version where this didn't fail:
+selectminbits='32'
+
+optimize="-Os"
+
+# the following is needed for the "musl" libc provided by emscripten to provide all functions
+ccflags="$ccflags -D_GNU_SOURCE -D_POSIX_C_SOURCE"
+
+# from Makefile.emcc / Makefile.micro
+ccflags="$ccflags -DNO_MATHOMS -fno-stack-protector"
+
+ldflags="$ldflags -s NO_EXIT_RUNTIME=1 -s ALLOW_MEMORY_GROWTH=1 -Wno-almost-asm"
+# Note: these can be ignored: "WARNING:root:not all asm.js optimizations are possible with ALLOW_MEMORY_GROWTH, disabling those. [-Walmost-asm]"
+# hence the switch to disable the warning above (we're not building for asm.js, just WebAssembly)
+
+# we need WASM because Perl does a lot of unaligned memory access, and that is only supported by WASM, not asm.js.
+ldflags="$ldflags -s WASM=1 -s BINARYEN_METHOD=native-wasm"
+#TODO Later: figure out "-s BINARYEN_METHOD='native-wasm,interpret-binary'"
+# when I tried it, I got this warning during compilation:
+# "BINARYEN_ASYNC_COMPILATION disabled due to user options. This will reduce performance and compatibility (some browsers limit synchronous compilation), see https://github.com/kripken/emscripten/wiki/WebAssembly#codegen-effects"
+# and this JS exception:
+# abort("sync fetching of the wasm failed: you can preload it to Module['wasmBinary'] manually, or emcc.py will do that for you when generating HTML (but not JS)")
+
+alignbytes='4'
+
+# disable this warning, I don't think we need it - TODO: how to append this after -Wall?
+#ccflags="$ccflags -Wno-null-pointer-arithmetic"
+
+# Configure apparently changes "-s ASSERTIONS=2 -s STACK_OVERFLOW_CHECK=2" to "-s -s" when converting ccflags to cppflags
+# this is the current hack/workaround: copy cppflags from config.sh and fix it (TODO Later: better way would be to patch Configure)
+#cppflags='-D_GNU_SOURCE -D_POSIX_C_SOURCE -DSTANDARD_C -DPERL_USE_SAFE_PUTENV -DNO_MATHOMS -Wno-null-pointer-arithmetic -fno-strict-aliasing -pipe -fstack-protector-strong -I/usr/local/include'
